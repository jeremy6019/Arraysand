package java0905;

public class ArrayAlgorithm {

	public static void main(String[] args) {
		
		//배열 생성 
			int [] arr = { 39, 53, 75, 93, 42 } ; 
			//arr배열에서 50이상인 데이터의 개수, 합계 , 평균을 구해서 출력 
			
			//1. 개수를 구할때는 개수를 저장할 변수를 만들고 얼마부터 시작할 지 초기값을 설정 
			// 대부분의 경우는 0으로 초기화하고 조건을 만족하는 경우 개수를 1증가시키면 됩니다.  
			int cnt = 0;
			
			// 2. 합계: 합계를 저장할 변수를 생성해서 처음 가지고 있을 값으로 초기화한 후 
			// 조건을 만족할 때 합계를 구할 데이터를 합계 변수에 더해주면 됩니다. 
			int sum = 0; 
			
			// 4. 최대값, 최소값 
			// 최대값: 최대값을 저장할 변수를 생성하고 배열의 첫번째  데이터 또는 데이터의 범위 
			// 중에서 아주 작은 값으로 초기화하고 배열의 데이터를 순회하면서 자신보다 더큰 데이터를 
			// 만나면 그값으로 변경하면 됩니다. 
			
			// 최소값: 최소값을 저장할 변수를 생성하고 배열의 첫번째  데이터 똔느 데이터의 범위
			// 중에서 아주 큰값으로 초기화하고 배열의 데이터를 순회하면서 자신보다 더작은 데이터를 
			// 만나면 그값으로 변겨앟면 됩니다. 
			
			// 최대값과 최소값을 저장할 변수 
			int max = arr[0]; 
			int min = arr[0]; 
			
			// 데이터 순회 
			for(int temp : arr) {
			   // 데이터와 최대갑승ㄹ 비교해서 데이터가 더크면 최대값을 변경 
				if(max < temp) {
				    max = temp;
			    }
				// 데이터와 최소값을 비교해서 데이터가 더 작으면 최소값을 변경 
				if(min > temp) {
					min = temp;
				}
			    if(temp >= 50) {
			    	// 개수  =  개수  +1
			    	cnt++;
			    	// 합계 = 합계 + 합을 구할 데이터 
			    	sum +=  temp; 
			    }
			
		    }					
			// 데이터의 개수 출력 
			System.out.printf("50이상인 데이터의 개수:%d\n",cnt); 
			// 합계 출력 
			System.out.printf("50이상인 데이터의 합계:%d\n",sum);
			// 3. 평균 
			// 평균은 한번만 계산 하면 되기 때문에 반복문 바깥에서 처리합니다. 
            // 평균을 구할때는 나누기를 하기 때문에 소수는 어떻게 할 것인지 고민 
			// 나누기를 할때는 나누는 수가 0인지 확인 
			if(cnt == 0) {
				System.out.printf("조건에 맞는 데이터가 없습니다.n");
			} else {
				//소수 두번째 자리에서 반올림해서 첫번째 자리까지만 출력  
				// 정수 / 정수 는 결과가 정수로 나옵니다. 
				// 정수 / 정수의 결과를 소수까지 구하고자 하는 경우에는 
				// 하나의 정수를 실수로 강제 형 변환해서 해야 합니다. 
				double avg = (double)sum / cnt ; 
				System.out.printf("50이상인 데이터의 평균:%.1f\n",avg);
			}
			// 최대값과 최소값 출력 
			System.out.printf("데이터중 최대값 :%d\n",max);			
			System.out.printf("데이터중 최소값 :%d\n",min);
			
			// 60에  가장 가까운 데이터를 조회 
			// 어떤 숫자에 가장 가까운 데이터를 조회하고자 하는 경우에는 
			// 숫자와의 차이를 찾고 그차이가 최소인 데이터를  찾아야 합니다. 
			// 찾는 것은 차이의 최소를 찾는 것이 아니고 
			// 차이가 최소가 되는 데이터 입니다. 
			
			int mindata = arr[0]; // 가장 가까운 데이터를 저장 
			int minvalue = 9999999;  // 60과의 최소 차이를 저장
			
		    for(int temp : arr) {
		    	// 60과의 차이를 구하기 
		    	int gap = 0;
		    	if(temp > 60) {
		    		gap = temp - 60; 		    		
		    	} else {
		    		gap = 60 - temp ; 
		    	}
		    	// 차이가 최소인 데이터 구하기 
		    	if(minvalue > gap) {
		    		minvalue = gap;
		    		// 차이가 최소인 데이터를 만나면 그 데이터를 저장해야 합니다. 
		    		mindata = temp;
		    	}
		    }
			//60에 가장 가까운 값 출력 
		    System.out.printf("60에 가장 가까운 데이터:%d 차이:%d\n",
		    		mindata, minvalue);
		    
			
	}

}
